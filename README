Web application for monitoring web sites that don't have RSS feeds or other
notification mechanism.


This web application follows the MVC architetural pattern. The code is
organized as follows:

Controllers :
	Classes responsible for handling incoming requests. Requests are
	mapped to controller actions(methods) using the standard rails 
	pattern :{controller}/{action}/{id}. Authentication/Authorization
	is defined at controller level by using the custom 'auth' decorator.
	Actions are the actual request handlers and are implemented as 
	controller methods. To be considered an action, the method must be
	decorated with a 'get' or 'post' decorator. These decorators will 
	permit an action to be accessed by either a 'GET' or 'POST' http method.
	Following the REST principles, all 'GET' actions should not have side
	effects, those are handled by the 'POST' actions.(get and post 
	decorators can be combined, but it's not recommended to have better
	separation of concerns. Controllers/actions can also have the 'menu'
	decorator, which allow them to specify labels or exclude themselves 
	for use in the automatically generated sitemap. Finally, actions can
	return three types of response: view(dynamic html), json(api for client
	code) or a redirect(which is a simple HTTP redirect).

Models :
	Classes that represent the data model of the application. Most of these
	also represent database tables. Models can be also used as data source
	for rendering json or html.

Views :
	Dynamic html generated by the Jinja template engine. Normally these are
	rendered using a model or form (or both) as data source.

Forms : 
	Like models, these represent data, but not for persistence. They handle
	validation and rendering of html forms. They are implemented using the
	wtforms library.

Services :
	These should implement all the services needed by the controllers. They
	handle things like database interaction, sending email, activating a 
	tracker, etc. Services are always injected with a context object, which
	represent the request context. These context objects should provide
	services with request-specific entities like database connection/transaction.
	
Daemons :
	They are child processes which handle long running or potentially blocking
	tasks. 


Each of these component groups have corresponding directories in the application root.
Other directories worth pointing are:

app :
	This contains infrastructure code to help the application to be easily
	maintained. It contains all the custom middlewares(in the wsgi sub directory).
	It also contains the 'config' module which is responsible for setting up the
	wsgi application. The web server should add this directory to the python path.

static :
	These contain static resources used the the application, such as stylesheets,
	javascript code files and images.
